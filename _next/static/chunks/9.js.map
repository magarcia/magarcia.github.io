{"version":3,"file":"static/chunks/9.js","sources":["webpack:///./_posts/2016-07-03-events-in-angular2.md"],"sourcesContent":["module.exports = \"---\\nlayout: post\\ntitle: Events in Angular2\\ntags:\\n  - GSoC\\n  - Jangouts\\n---\\n\\nDuring the migration of the feed component, I found a some lines that I didn't\\nknow how to code it on Angular 2. The following gist is an extract of the code\\nI'm talking about:\\n\\n```ts\\nif (!feed.isLocalScreen) {\\n  // Until this timeout is reached, the \\\"you are muted\\\" notification\\n  // will not be displayed again\\n  var mutedWarningTimeout = now();\\n\\n  scope.$on('muted.byRequest', function() {\\n    mutedWarningTimeout = secondsFromNow(3);\\n    MuteNotifier.muted();\\n  });\\n\\n  scope.$on('muted.byUser', function() {\\n    // Reset the warning timeout\\n    mutedWarningTimeout = now();\\n  });\\n\\n  scope.$on('muted.Join', function() {\\n    mutedWarningTimeout = now();\\n    MuteNotifier.joinedMuted();\\n  });\\n\\n  scope.$watch('vm.feed.isVoiceDetected()', function(newVal) {\\n    // Display warning only if muted (check for false, undefined means\\n    // still connecting) and the timeout has been reached\\n    if (newVal && feed.getAudioEnabled() === false && now() > mutedWarningTimeout) {\\n      MuteNotifier.speaking();\\n      mutedWarningTimeout = secondsFromNow(60);\\n    }\\n  });\\n}\\n```\\n\\nAs you can see in the snippet, if the condition is true then the directive\\nlistens for events of type `muted.byRequest`, `muted.byUser` and `muted.Join`.\\nThe code that involves this events is easy, without any type of complexity (for\\nnow we ignore the `$watch`).\\n\\nBut, wait a minute, I have read the documentation of Angular 2 like hundred\\ntimes and I do not remember nothing about \\\"events\\\" with Angular 1.X style. Thats\\nbecause it not exist. Angular 2 don't have a way to make events like in Angular 1,\\nso I have to find a solution. After search for a solution I found [this entry](http://blog.lacolaco.net/post/event-broadcasting-in-angular-2/)\\nin laco's blog.\\n\\n## Broadcaster\\n\\nBasicaly the idea is to make a service that implements the `$broadcast` and\\n`$on` method like we had in `$rootScope`. For do this we use Observables, very\\nimportant in Angular 2, and in this case we use a [Subject](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/subjects.md).\\n\\n```ts\\nimport { Subject } from 'rxjs/Subject';\\nimport { Observable } from 'rxjs/Observable';\\nimport 'rxjs/add/operator/filter';\\nimport 'rxjs/add/operator/map';\\n\\ninterface BroadcastEvent {\\n  key: any;\\n  data?: any;\\n}\\n\\nexport class Broadcaster {\\n  private _eventBus: Subject<BroadcastEvent>;\\n\\n  constructor() {\\n    this._eventBus = new Subject<BroadcastEvent>();\\n  }\\n\\n  broadcast(key: any, data?: any) {\\n    this._eventBus.next({ key, data });\\n  }\\n\\n  on<T>(key: any): Observable<T> {\\n    return this._eventBus\\n      .asObservable()\\n      .filter(event => event.key === key)\\n      .map(event => <T>event.data);\\n  }\\n}\\n```\\n\\nSo, now we can start to use events like in the example:\\n\\n```ts\\n// child.ts\\n@Component({\\n    selector: 'child'\\n})\\nexport class ChildComponent {\\n  constructor(private broadcaster: Broadcaster) {\\n  }\\n\\n  registerStringBroadcast() {\\n    this.broadcaster.on<string>('MyEvent')\\n      .subscribe(message => {\\n        ...\\n      });\\n  }\\n\\n  emitStringBroadcast() {\\n    this.broadcaster.broadcast('MyEvent', 'some message');\\n  }\\n}\\n```\\n\\n## How I solved the problem?\\n\\nI didn't. This events are only to show the user information pop ups about when\\nhe is muted, so it's not a critical feature. By now this events are fired and\\nlisten in different components, and some of it still implemented in Angular 1.4.\\n\\nThis is a solution I want to share with you, but I'm not sure if this will be\\nthe way that I will use to solve the problem. Because this events probably won't\\nbe necessary when I reimplement the `MuteNotifier`.\\n\""],"mappings":";;;;;;;;;AAAA;;;;A","sourceRoot":""}