(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{506:function(t,n){t.exports="---\nlayout: post\ntitle: $watch with Angular 2\ntags:\n  - GSoC\n  - Jangouts\n---\n\nIn my [previous post](/2016/07/03/events-in-angular2), I was talking about how to implement events from Angular 1\nin Angular 2. But in the snippet of code that I use as example we can find\nanother thing that not exist in Angular 2: `$watch`.\n\nI start defining the problem. We can have a directive or Angular 1 component\nlike that:\n\n`gist:https://gist.github.com/magarcia/384af019aef2ef465f3e08c5b8f905ec.js?file=example.directive.js`\n\nIf we want to migrate this code to Angular 2 we find a trouble: the new Angular\ndon't have `scope`, so it don't have `$watch`. How we can watch a directive\nattribute? The solution is the **set** syntax from ES6.\n\n> The **set** syntax binds an object property to a function to be called when\n> there is an attempt to set that property.\n\n_From [MDN](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/set)_\n\nSo we can bind the input for a component to a function that do the same as the\n`$watch` function.\n\n`gist:https://gist.github.com/magarcia/384af019aef2ef465f3e08c5b8f905ec.js?file=example.component.ts`\n"}}]);