{"version":3,"sources":["webpack:///./src/components/Footer.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Layout.js","webpack:///./src/components/SEO.js","webpack:///./src/utils/helpers.js"],"names":["Footer","react_default","a","createElement","className","href","target","rel","__webpack_require__","d","__webpack_exports__","pageQuery","BlogIndex","_ref","location","data","siteTitle","get","posts","Layout","title","SEO","map","_ref2","node","fields","slug","key","gatsby_browser_entry","to","buildPath","frontmatter","dateRaw","dateTime","formatPostDate","date","formatReadingTime","timeToRead","dangerouslySetInnerHTML","__html","spoiler","excerpt","r","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","renderHeader","_this$props","this","react__WEBPACK_IMPORTED_MODULE_1___default","Fragment","gatsby__WEBPACK_IMPORTED_MODULE_2__","Component","meta","image","description","_ref$lang","lang","react__WEBPACK_IMPORTED_MODULE_2___default","gatsby__WEBPACK_IMPORTED_MODULE_5__","siteMetadata","site","metaDescription","metaImage","siteUrl","url","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","_public_static_d_3236765318_json__WEBPACK_IMPORTED_MODULE_1__","defaultProps","array","minutes","_date","Date","prototype","toLocaleDateString","args","day","month","year","filter","Boolean","apply","replace"],"mappings":"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","file":"component---src-pages-index-js-2e971025310f524dd15e.js","sourcesContent":["import React from 'react';\n\nexport default () => (\n  <footer className=\"footer\">\n    <div>\n      <a href=\"https://mobile.twitter.com/martinprins\" target=\"_blank\" rel=\"noopener noreferrer\">\n        twitter\n      </a>{' '}\n      &#8208;{' '}\n      <a href=\"https://github.com/magarcia\" target=\"_blank\" rel=\"noopener noreferrer\">\n        github\n      </a>{' '}\n      {/* &#8208;{\" \"}\n          <a\n            href=\"https://stackoverflow.com/users/458193/martin-prins\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            stack overflow\n          </a> */}\n    </div>\n\n    <div>\n      <a href=\"/rss.xml\" target=\"_blank\" rel=\"noopener noreferrer\">\n        rss\n      </a>\n    </div>\n  </footer>\n);\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport get from 'lodash/get';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport Footer from '../components/Footer';\nimport { buildPath, formatPostDate, formatReadingTime } from '../utils/helpers';\nimport '../styles/index.css';\n\nconst BlogIndex = ({ location, data }) => {\n  const siteTitle = get(data, 'site.siteMetadata.title');\n  const posts = get(data, 'allMarkdownRemark.edges');\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO />\n      {/* <Bio /> */}\n      <main className=\"post-list\">\n        {posts.map(({ node }) => {\n          const title = get(node, 'frontmatter.title') || node.fields.slug;\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h3>\n                  <Link to={buildPath(node.frontmatter.dateRaw, node.fields.slug)}>{title}</Link>\n                </h3>\n                <small className=\"info\">\n                  <time dateTime={node.frontmatter.dateRaw}>\n                    {formatPostDate(node.frontmatter.date)}\n                  </time>{' '}\n                  &#8208; {formatReadingTime(node.timeToRead)}\n                </small>\n              </header>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.spoiler || node.excerpt\n                }}\n              />\n            </article>\n          );\n        })}\n      </main>\n      <Footer />\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 140)\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            dateRaw: date\n            title\n            spoiler\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nclass Layout extends React.Component {\n  renderHeader() {\n    const { location, title } = this.props;\n    const rootPath = `${__PATH_PREFIX__}/`; // eslint-disable-line no-undef\n\n    if (location.pathname === rootPath) {\n      return (\n        <>\n          <h1>\n            <Link to=\"/\">{title}</Link>\n          </h1>\n        </>\n      );\n    }\n    return (\n      <h3>\n        <Link to=\"/\">{title}</Link>\n      </h3>\n    );\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return (\n      <>\n        <header className=\"header\">{this.renderHeader()}</header>\n        {children}\n      </>\n    );\n  }\n}\n\nexport default Layout;\n","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nfunction SEO({ meta, image, title, description, slug, lang = 'en' }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site;\n        const metaDescription = description || siteMetadata.description;\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null;\n        const url = `${siteMetadata.siteUrl}${slug}`;\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title\n                }\n              : {\n                  title: `${siteMetadata.title} — A blog by Martin Garcia`\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription\n              },\n              {\n                property: 'og:url',\n                content: url\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title\n              },\n              {\n                name: 'og:description',\n                content: metaDescription\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary'\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription\n              }\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: metaImage\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: metaImage\n                      }\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: ''\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string\n};\n\nexport default SEO;\n","export function formatReadingTime(minutes) {\n  return `${minutes} min read`;\n}\n\n// `lang` is optional and will default to the current user agent locale\nexport function formatPostDate(date, lang = 'en') {\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\n    return date;\n  }\n\n  date = new Date(date);\n  const args = [lang, { day: 'numeric', month: 'long', year: 'numeric' }].filter(Boolean);\n  return date.toLocaleDateString(...args);\n}\n\nexport function buildPath(date, slug) {\n  return `/${date.replace(/-/g, '/')}${slug}`;\n}\n"],"sourceRoot":""}