{"data":{"site":{"siteMetadata":{"title":"magarcia","author":"Martin Garcia"}},"markdownRemark":{"id":"df98b08e-e125-5932-8418-672305521045","html":"<p>I’ve been working with <a href=\"https://reactjs.org/\">React</a> more than two years now. I\nstarted in a quite big project with a lot of work already done that was using\n<a href=\"https://redux.js.org/\">Redux</a>. I was a bit overwhelming start directly with so\nmuch stuff done, especially with a framework I didn’t know much about. But after\nsome time I got more comfortable and experienced.</p>\n<p>Recently I discovered the project <a href=\"https://redux-starter-kit.js.org/\">Redux Starter Kit</a>\nfrom the same team that works on Redux. It’s a simple toolset that provides\nutilities that can make really simple and easy work with Redux. In fact, one of\nthe tools it provides, <code class=\"language-text\">createReducer</code>, is a patter I’ve been using for a while\nand it helps me a lot on reducing boilerplate code and speeding up my development\n(especially in new projects).</p>\n<p>So in order to learn more about and get comfortable using it, I decided to\nmigrate an already existing codebase with Redux, using this toolset. Obviously,\nas an example project for a frontend framework, I picked the omnipresent\n<a href=\"http://todomvc.com/\">TodoMVC</a>, in concrete the version that Redux provides as\nexample in <a href=\"https://github.com/reduxjs/redux/tree/master/examples/todomvc\">his repository</a>.</p>\n<h2 id=\"starting-point\"><a href=\"#starting-point\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Starting point</h2>\n<p>For whoever doesn’t know how this app looks like in Redux, it has two main\nreducers <code class=\"language-text\">visibilityFilter</code> and <code class=\"language-text\">todos</code>; both with his respective actions,\naction creators and selectors.</p>\n<h2 id=\"visibility-filter\"><a href=\"#visibility-filter\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Visibility Filter</h2>\n<p>I started with the most “simple” reducer, to start small and then move to a more\ncomplex state.</p>\n<h3 id=\"reducer\"><a href=\"#reducer\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducer</h3>\n<p>The reducer, as it came from the Redux example, it’s already quite simple and\neasy to understand.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// reducers/visibilityFilter.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SET_VISIBILITY_FILTER</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/ActionTypes'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SHOW_ALL</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/TodoFilters'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">SHOW_ALL</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">SET_VISIBILITY_FILTER</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In order to create reducers Redux Starter Kit provides a function <code class=\"language-text\">createReducer</code>,\nas I mentioned before it’s a pattern I already used and I’m quite happy with it.</p>\n<p>The idea is simple, instead of having to create a reducer function with a\n<code class=\"language-text\">switch case</code> statement inside, this function expects the initial state as a\nfirst parameter and an object where the keys are the action types and the value\nare the reducers (<code class=\"language-text\">(state, action) =&gt; { /* reducer code */</code>) for this action.</p>\n<p>It reduces some boilerplate and will set always the <code class=\"language-text\">default</code> statement as\n<code class=\"language-text\">return state</code>. But to me, the biggest benefit is the readability that provides.</p>\n<p>This is how the visibility filter reducer looks like using <code class=\"language-text\">createReducer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// reducers/visibilityFilter.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-starter-kit'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SET_VISIBILITY_FILTER</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/ActionTypes'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SHOW_ALL</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/TodoFilters'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SHOW_ALL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">SET_VISIBILITY_FILTER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> action<span class=\"token punctuation\">.</span>filter\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"actions-creators\"><a href=\"#actions-creators\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions creators</h3>\n<p>Now is time for the actions. The visibility filter only has one action\n<code class=\"language-text\">SET_VISIBILITY_FILTER</code> and the creator is very simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// actions/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> types <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/ActionTypes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* ... Other actions ...*/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setVisibilityFilter</span> <span class=\"token operator\">=</span> filter <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token constant\">SET_VISIBILITY_FILTER</span><span class=\"token punctuation\">,</span>\n  filter\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the actions, this toolset can be quite opinionated. It provides the function\n<code class=\"language-text\">createAction</code> that only expects the action type as a parameter. As a result,\nwe get an action creator.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// actions/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> types <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/ActionTypes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* ... Other actions ...*/</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> setVisibilityFilter <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>types<span class=\"token punctuation\">.</span><span class=\"token constant\">SET_VISIBILITY_FILTER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This action creator can be run with or without parameters. In the case that we\nsend a parameter, this will be set as the payload of the action. These are some\nexamples of how will work:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> setVisibilityFilter <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SET_VISIBILITY_FILTER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> action <span class=\"token operator\">=</span> <span class=\"token function\">setVisibilityFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { type: 'SET_VISIBILITY_FILTER' }</span>\n\naction <span class=\"token operator\">=</span> <span class=\"token function\">setVisibilityFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SHOW_COMPLETED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns { type: 'SET_VISIBILITY_FILTER', payload: 'SHOW_COMPLETED' }</span>\n\nsetVisibilityFilter<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 'SET_VISIBILITY_FILTER'</span></code></pre></div>\n<p>So now the filter is set into the <code class=\"language-text\">payload</code> key of the action, this implies a\nrefactor on the reducer since we were using the key filter, but luckily is\nvery simple to change.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// reducers/visibilityFilter.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-starter-kit'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SET_VISIBILITY_FILTER</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/ActionTypes'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">SHOW_ALL</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../constants/TodoFilters'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SHOW_ALL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">SET_VISIBILITY_FILTER</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> action<span class=\"token punctuation\">.</span>payload\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"selectors\"><a href=\"#selectors\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selectors</h3>\n<p>For me using selectors is one of the best choices that anyone can take when\nworking with React, because it makes really simple refactor how the state looks\nlike without having to change all the components that are consuming this part\nof the state.</p>\n<p>The selector of the visibility filter is one of the easiest ones:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// selectors/index.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getVisibilityFilter</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>visibilityFilter<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* ... Other selectors ...*/</span></code></pre></div>\n<p>And it doesn’t change too much using the function <code class=\"language-text\">createSelector</code>. Actually,\nwe have more code now than with the previous version, but trust me it’s going\nto be simpler. Just keep reading.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// selectors/index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-starter-kit'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getVisibilityFilter <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'visibilityFilter'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* ... Other selectors ...*/</span></code></pre></div>\n<h3 id=\"slices\"><a href=\"#slices\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slices</h3>\n<p>Until now the only thing that we did is changing some simple functions to more\nsimple functions using different <em>creators</em>. But now is where I discovered the\nreal power of the toolset: <code class=\"language-text\">createSlice</code>.</p>\n<p><code class=\"language-text\">createSlice</code> is a function that accepts an initial state, an object full of\nreducer functions, and optionally a “slice name”, and automatically generates\naction creators, action types, and selectors ready to be used.</p>\n<p>Now we can throw all the code that we did.</p>\n<p>Creating a slice for the visibility filter is very clean and easy to understand,\nand since we can throw all the previous code that we refactor the final result\nit’s removing a lot of boilerplate.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ducks/visibilityFilter.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSlice <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-starter-kit'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  slice<span class=\"token punctuation\">:</span> <span class=\"token string\">'visibilityFilter'</span><span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">:</span> <span class=\"token constant\">SHOW_ALL</span><span class=\"token punctuation\">,</span>\n  reducers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    setVisibilityFilter<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> action<span class=\"token punctuation\">.</span>payload\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we have a single object as a result containing all that we need to work\nproperly with Redux. This is how it can be used:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  visibilityFilter<span class=\"token punctuation\">:</span> visibilityFilter<span class=\"token punctuation\">.</span>reducer\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>visibilityFilter<span class=\"token punctuation\">.</span>actions<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibilityFilter</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SHOW_COMPLETED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -> { visibilityFilter: 'SHOW_COMPLETED' }</span>\n\n<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>visibilityFilter<span class=\"token punctuation\">.</span>selectors<span class=\"token punctuation\">.</span><span class=\"token function\">getVisibilityFilter</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -> SHOW_COMPLETED</span></code></pre></div>\n<p>All the changes did until now are in <a href=\"https://github.com/magarcia/todomvc-redux-starter-kit/commit/ae78e0aacd4827786a63f29db4d6f4e0a2079422\">this commit</a>.</p>\n<h2 id=\"todos\"><a href=\"#todos\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Todos</h2>\n<p>The todos reducer is more complex so I’m not going to show the refactor step by\nstep. Instead, I’m going to explain how the final result looks like, but if you\nare interested in see directly the final result is <a href=\"https://github.com/magarcia/todomvc-redux-starter-kit/blob/ba531a2ea7c2c5ee8148e2a1ab491e7e0a31e819/src/ducks/todos.js\">here</a>.</p>\n<p>The first part is defining the initial state:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ducks/todos.js</span>\n<span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Use Redux'</span><span class=\"token punctuation\">,</span>\n    completed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In order to make the slice creation more readable, I extracted the different\nreducer actions in different functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ducks/todos.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n  <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxId<span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> maxId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    completed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    text<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>text\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">editTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span>\n    todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> todo\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">completeTodo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span>\n    todo<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span>completed <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> todo\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">completeAllTodos</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> areAllMarked <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>todo<span class=\"token punctuation\">,</span>\n    completed<span class=\"token punctuation\">:</span> <span class=\"token operator\">!</span>areAllMarked\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearCompleted</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now we can put all together in a new slice:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ducks/todos.js</span>\n<span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token function\">createSlice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  slice<span class=\"token punctuation\">:</span> <span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">,</span>\n  reducers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    add<span class=\"token punctuation\">:</span> addTodo<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">:</span> deleteTodo<span class=\"token punctuation\">,</span>\n    edit<span class=\"token punctuation\">:</span> editTodo<span class=\"token punctuation\">,</span>\n    complete<span class=\"token punctuation\">:</span> completeTodo<span class=\"token punctuation\">,</span>\n    completeAll<span class=\"token punctuation\">:</span> completeAllTodos<span class=\"token punctuation\">,</span>\n    clearCompleted<span class=\"token punctuation\">:</span> clearCompleted\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By default the selectors returned by <code class=\"language-text\">createSlice</code> are very simple, they just\nreturn the value from the state (eg: <code class=\"language-text\">todos.selectors.getTodos</code>). But in this\napplication, we need to define more complex selectors.</p>\n<p>For example, <code class=\"language-text\">getVisibleTodos</code> needs two know about the current visibility filter\nand also the todos. <code class=\"language-text\">createSelector</code> gets as a first parameter an array with\nstrings (the path to select from the state) or other selectors and as a second\nparameter the function that’s going to implement the logic that we want to\nselect the todos based on the selected filter.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ducks/todos.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getVisibilityFilter <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> visibilityFilter<span class=\"token punctuation\">.</span>selectors<span class=\"token punctuation\">;</span>\n\ntodos<span class=\"token punctuation\">.</span>selectors<span class=\"token punctuation\">.</span>getVisibleTodos <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>getVisibilityFilter<span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">.</span>selectors<span class=\"token punctuation\">.</span>getTodos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>visibilityFilter<span class=\"token punctuation\">,</span> todos<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>visibilityFilter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">SHOW_ALL</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> todos<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">SHOW_COMPLETED</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">SHOW_ACTIVE</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span>completed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Unknown filter: '</span> <span class=\"token operator\">+</span> visibilityFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntodos<span class=\"token punctuation\">.</span>selectors<span class=\"token punctuation\">.</span>getCompletedTodoCount <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">.</span>selectors<span class=\"token punctuation\">.</span>getTodos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  todos <span class=\"token operator\">=></span> todos<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>completed <span class=\"token operator\">?</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can notice in the previous code, I created the new selectors in the\n<code class=\"language-text\">selectors</code> object in the <code class=\"language-text\">todos</code> slice so now we have all the selectors\naccessible in the same place.</p>\n<h2 id=\"create-store\"><a href=\"#create-store\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Store</h2>\n<p>The last two functions provided by the library are <code class=\"language-text\">configureStore</code> and\n<code class=\"language-text\">getDefaultMiddleware</code>.</p>\n<p><code class=\"language-text\">configureStore</code> is an abstraction over the standard Redux <code class=\"language-text\">createStore</code>\nfunction. Doesn’t provide more functionalities than <code class=\"language-text\">createStore</code> but it makes\nthings easier to read, like enable developer tools that is just a boolean.</p>\n<p><code class=\"language-text\">getDefaultMiddleware</code> returns a list of middlewares\n<code class=\"language-text\">[immutableStateInvariant, thunk, serializableStateInvariant]</code> in development\nand <code class=\"language-text\">[thunk]</code> in production.</p>\n<ul>\n<li><code class=\"language-text\">redux-immutable-state-invariant</code>: It can detect mutations in reducers during\na dispatch, and also mutations that occur between dispatches (eg: in selectors\nor components).</li>\n<li><code class=\"language-text\">serializable-state-invariant-middleware</code>: It deeply checks your state tree\nand your actions for non-serializable values such as functions, Promises, etc.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// store.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configureStore<span class=\"token punctuation\">,</span> getDefaultMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-starter-kit'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> visibilityFilter<span class=\"token punctuation\">,</span> todos <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./ducks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> preloadedState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  todos<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Use Redux'</span><span class=\"token punctuation\">,</span>\n      completed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  todos<span class=\"token punctuation\">:</span> todos<span class=\"token punctuation\">.</span>reducer<span class=\"token punctuation\">,</span>\n  visibilityFilter<span class=\"token punctuation\">:</span> visibilityFilter<span class=\"token punctuation\">.</span>reducer\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">getDefaultMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">configureStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  reducer<span class=\"token punctuation\">,</span>\n  middleware<span class=\"token punctuation\">,</span>\n  devTools<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n  preloadedState\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"final-thoughts\"><a href=\"#final-thoughts\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Final thoughts</h2>\n<p>Redux Starter Kit looks interesting, it reduces boilerplate code making the code\ncleaner and easy to understand. But also it makes really fast to develop new\ncode.</p>\n<p>Source Code: <a href=\"https://github.com/magarcia/todomvc-redux-starter-kit\">https://github.com/magarcia/todomvc-redux-starter-kit</a></p>","timeToRead":8,"frontmatter":{"title":"Refactor TodoMVC with Redux Starter Kit","date":"January 26, 2019","dateRaw":"2019-01-26","spoiler":"How to make redux related code more readable."},"fields":{"slug":"/todomvc-redux-starter-kit/"}}},"pageContext":{"slug":"/todomvc-redux-starter-kit/","date":"2019-01-26","previous":{"fields":{"slug":"/watch-with-angular2/","directoryName":"watch-with-angular2"},"frontmatter":{"title":"$watch with Angular 2","date":"2016-07-04"}},"next":null}}