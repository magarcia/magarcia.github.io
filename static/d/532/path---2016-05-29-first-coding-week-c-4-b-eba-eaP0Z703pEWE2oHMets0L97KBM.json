{"data":{"site":{"siteMetadata":{"title":"magarcia","author":"Martin Garcia"}},"markdownRemark":{"id":"728e18d0-68da-5f56-b2a7-016ce7a8b627","html":"<p>The first week of the coding period at GSoC 2016, so I started the upgrading process of\nJangouts from Angular 1.x to Angular 2. This week, the tasks have been\nfulfilled within the deadline, I hope to remain so for the next week.</p>\n<p>I’m following the <a href=\"https://angular.io/docs/ts/latest/guide/upgrade.html\">upgrade guide</a>\nfrom official Angular docs, which has two main blocks:</p>\n<ul>\n<li>Preparation</li>\n<li>Upgrading with The Upgrade Adapter</li>\n</ul>\n<p>I just finished the preparation block. I was lucky because the code of Jangouts\nis really clear and it follows two important points of the preparation block:\nFollow the Angular style guide and use component directives. So this left me\nonly two things to do. First of all, switch from load files with <code class=\"language-text\">&lt;script&gt;</code>\ntags to a module loader and then migrate the code from JavaScript to TypeScript.\nBut I’ve done it in reverse order, first migrate to TypeScript and then switch to\na module loader. Why? I think this way is more “natural”, at least for this project.</p>\n<h2 id=\"migrating-to-typescript\"><a href=\"#migrating-to-typescript\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Migrating to TypeScript</h2>\n<p>Jangouts has a gulp build system working, so I didn’t have to worry about how\nthe scripts are loaded. First I worry about migrating the files to TypeScript\nand when all was ready, then I try to take profit from the <code class=\"language-text\">import</code> syntax of\nTypeScript/ES6.</p>\n<p>Migrate code from JavaScript to TypeScript is really easy, only need to change\nthe extension form <code class=\"language-text\">.js</code> to <code class=\"language-text\">.ts</code>. Obviously, the existing gulp system doesn’t works\nwith these changes, so in parallel of running gulp you should run\n<code class=\"language-text\">tsc --watch src/**/*.ts</code>. This command shows a lot of errors but don’t worry\nabout this if the JavaScript code is correct, all these errors are related to the\ntype checking process of TypeScript compiler.</p>\n<p>During this migration process, I also perform some changes in the code to make\nit more modular. Jangouts have all the components registered in the same Angular\nmodule <code class=\"language-text\">janusHangouts</code> and in other projects I worked before I learned that this\ncan make some troubles when you have to do unit testing, so I define a\ndifferent module for each component (<code class=\"language-text\">janusHangouts.componentName</code>)\nand then make it a dependency of the main module. This has to advantages: make\ntests is easier and in the future we can load components on demand with a\nmodule loader (but I’m not sure about the last one).</p>\n<p>Back to some, I said earlier, when compiling the JavaScript code with <code class=\"language-text\">tsc</code> this\nshows a lot of errors. One that could appear a lot is something like this:</p>\n<blockquote>\n<p><code class=\"language-text\">error TS7006: Parameter &#39;$state&#39; implicitly has an &#39;any&#39; type.</code></p>\n</blockquote>\n<p>This is because TypeScript compiler wants a type defined for all variables, but\nwe can make that <code class=\"language-text\">tsc</code> set the implicit type any for variables without type.\nThe only thing to do is disable the option <code class=\"language-text\">noImplicitAny</code> in the <code class=\"language-text\">tsconfig.json</code>\nfile.</p>\n<p>Another error we can find when working with HTML elements is:</p>\n<blockquote>\n<p><code class=\"language-text\">error TS2339: Property &#39;muted&#39; does not exist on type &#39;HTMLElement&#39;.</code></p>\n</blockquote>\n<p>This error is produced from a code like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"video\"</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvideo<span class=\"token punctuation\">.</span>muted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The error is produced because TypeScript is type save. So the\n<code class=\"language-text\">$(&#39;video&#39;, element)[0]</code> returns the type <code class=\"language-text\">HTMLElement</code> which does not contain\na <code class=\"language-text\">muted</code> property. The subtype <code class=\"language-text\">HTMLVideoElement</code> does however contain the\n<code class=\"language-text\">muted</code> property. So the solution is to cast the result to <code class=\"language-text\">HTMLVideoElement</code>\nlike this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> video <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>HTMLVideoElement<span class=\"token operator\">></span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvideo<span class=\"token punctuation\">.</span>muted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, another common error is:</p>\n<blockquote>\n<p><code class=\"language-text\">error TS2339: Property &#39;id&#39; does not exist on type &#39;{}&#39;.</code></p>\n</blockquote>\n<p>This is another “problem” produced by the type validations of TypeScript. We can\nfound errors like that in fragments of code similar to:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> room <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Some code here...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isRoom</span><span class=\"token punctuation\">(</span>room<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> room<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> roomId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To solve this and make the code less error-prone, we should define an interface\nfor the room object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Room</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ? makes the attribute optional</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Some code here ...</span>\n\n<span class=\"token keyword\">var</span> room<span class=\"token punctuation\">:</span> Room <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Some code here...</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isRoom</span><span class=\"token punctuation\">(</span>room<span class=\"token punctuation\">:</span> Room<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> room<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> roomId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"using-a-module-loader\"><a href=\"#using-a-module-loader\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a Module Loader</h2>\n<p>Why we should use a module loader? We can find the response in Angular site:</p>\n<blockquote>\n<p>Using a module loader such as <a href=\"https://github.com/systemjs/systemjs\">SystemJS</a>,\n<a href=\"http://webpack.github.io/\">Webpack</a>, or <a href=\"http://browserify.org/\">Browserify</a>\nallows us to use the built-in module systems of the TypeScript or ES2015\nlanguages in our apps. We can use the import and export features that explicitly\nspecify what code can and will be shared between different parts of the\napplication. […]</p>\n<p>When we then take our applications into production, module loaders also make\nit easier to package them all up into production bundles with batteries\nincluded.</p>\n</blockquote>\n<p>I discard Browserify because I had bad experiences in the past. So I have only\ntried with SystemJS and Webpack.</p>\n<h3 id=\"systemjs\"><a href=\"#systemjs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SystemJS</h3>\n<p>SystemJS looks really clean, really simple. The only thing I was to do is define\nan entry point (normally the main file of the application) and the <code class=\"language-text\">import</code>\nsyntax do the rest. So, if we have the <code class=\"language-text\">import</code> statements correctly placed, all\nwork without a problem.</p>\n<p>But with this solution, we need to conserve gulp, because SystemJS only cares\nabout the imports. So this implies add the TypesScript compiler to gulp and\ndisable the auto inject of script in html.</p>\n<p>Sincerely I didn’t try that before trying to rewrite the gulp configuration I\nwanted to have a look at Webpack first.</p>\n<h3 id=\"webpack\"><a href=\"#webpack\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack</h3>\n<p>The configuration of Webpack is more complex than SystemJS, but it gives a\nsubstitution of gulp. As SystemJS does, we need to define an entry point for the\napplication and also tell him where is the <code class=\"language-text\">index.html</code> to include the\nJavaScript files.</p>\n<p>Initially, I had some troubles, but after looking at some examples, I had a\nfunctional version. Exploring more depth in Webpack I found something that makes\nme choose it before others: we can <code class=\"language-text\">import</code> or <code class=\"language-text\">require</code> non JavaScript files.\nSo we can do things like require the template of an Angular directive, and in\nthe building process this template will be included as a string variable inside\nthe component, and with styles we have the same feature. This functionality\nimproves the final build of the application because all the files needed by a\ncomponent will be placed inside the JavaScript file of the component, improving\nthe performance but without making difficult program it.</p>\n<h2 id=\"one-more-thing\"><a href=\"#one-more-thing\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One more thing</h2>\n<p>This summer looks exciting with all the things I have to learn with GSoC. If\nyou want to follow the progress of what I’m doing keep update of this blog or\nfollow my contributions on GitHub. Also, I published a\n<a href=\"https://trello.com/b/vtQJBxbf/jangouts\">Trello board</a> with the planning and\nthings to do with this project (not fully update yet but in progress).</p>","timeToRead":5,"frontmatter":{"title":"First coding week","date":"May 29, 2016","dateRaw":"2016-05-29","spoiler":null},"fields":{"slug":"/first-coding-week/"}}},"pageContext":{"slug":"/first-coding-week/","date":"2016-05-29","previous":{"fields":{"slug":"/ending-community-bonding-period/","directoryName":"ending-community-bonding-period"},"frontmatter":{"title":"Ending Community Bonding Period","date":"2016-05-22"}},"next":{"fields":{"slug":"/component-migration-started/","directoryName":"component-migration-started"},"frontmatter":{"title":"Components migration started","date":"2016-06-05"}}}}